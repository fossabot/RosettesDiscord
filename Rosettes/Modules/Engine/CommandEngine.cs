using Discord;
using Discord.Commands;
using Rosettes.Core;
using Rosettes.Modules.Commands;

namespace Rosettes.Modules.Engine
{
    public static class CommandEngine
    {
        private static readonly CommandService _commands = ServiceManager.GetService<CommandService>();

        public static readonly Dictionary<string, int> CommandUsage = new();

        public static async Task LoadCommands()
        {
            // Load all the commands from their modules
            // The order in which commands are listed is the ordewr
            // in which they are listed.
            await _commands.AddModuleAsync<UtilityCommands>(null);
            await _commands.AddModuleAsync<RandomCommands>(null);
            await _commands.AddModuleAsync<MusicCommands>(null);
            await _commands.AddModuleAsync<GameCommands>(null);
            await _commands.AddModuleAsync<DumbCommands>(null);

            // always load ElevatedCommands last.
            await _commands.AddModuleAsync<ElevatedCommands>(null);
        }

        public static async Task HandleCommand(SocketCommandContext context, int argPos)
        {
            var user = await UserEngine.GetDBUser(context.User);
            if (user.CanUseCommand(context.Guild))
            {
                string usedCommand;
                // get the name of the used command and count it for usage analytics
                // if it contains a space, that means the command has arguments. delete the arguments
                if (context.Message.Content.Contains(' '))
                {
                    usedCommand = context.Message.Content[0..context.Message.Content.IndexOf(" ")];
                } else
                {
                    usedCommand = context.Message.Content;
                }
                if (!CommandEngine.CommandUsage.ContainsKey(usedCommand))
                {
                    CommandEngine.CommandUsage.Add(usedCommand, 1);
                }
                else
                {
                    CommandEngine.CommandUsage[usedCommand]++;
                }
                await _commands.ExecuteAsync(context: context, argPos: argPos, services: ServiceManager.Provider);
            }
            else
            {
                await context.Message.AddReactionAsync(new Emoji("⌚"));
            }
        }

        public static void CreateCommandPage()
        {
            if (!Directory.Exists("/var/www/html/snep.markski.ar/rosettes/"))
            {
                Directory.CreateDirectory("/var/www/html/snep.markski.ar/rosettes/");
            }

            string webContents =
                @"<style>
                    body {
                        font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu,
		                Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
	                    line-height: 1.6;
	                    font-size: 18px;
	                    color: #DDDDDD;
	                    background-color: darkslategray;
                    }
                    .container {
                        max-width: 48rem;
	                    padding: 1rem;
	                    margin: 0rem auto;
                    }
                  </style>
                  <div class='container'>
            ";

            webContents += $"<p><small>This page is autogenerated by Rosettes every time it restarts. Last update: {DateTime.UtcNow:ddd, dd MMM yyy; HH:mm:ss} GMT</small></p>\n";

            ModuleInfo? currModule = null;
            var comms = ServiceManager.GetService<CommandService>();
            foreach (CommandInfo singleCommand in comms.Commands)
            {
                if (singleCommand.Module.Name == "ElevatedCommands") break;
                if (currModule == null || currModule.Name != singleCommand.Module.Name)
                {
                    currModule = singleCommand.Module;
                    webContents += $"<hr>\n<p><b>{currModule.Summary}</b></p>\n";
                }
                webContents += $"<p><b>{Settings.Prefix}{singleCommand.Name}</b><br>\n";
                if (singleCommand.Summary != null)
                {
                    webContents += $"{singleCommand.Summary}</p>\n";
                }
                else
                {
                    webContents += $"&nbsp;</p>\n";
                }
            }
            webContents += "</div>";
            using var writer = File.CreateText("/var/www/html/snep.markski.ar/rosettes/commands.html");

            writer.Write(webContents);

            writer.Close();
        }
    }
}
